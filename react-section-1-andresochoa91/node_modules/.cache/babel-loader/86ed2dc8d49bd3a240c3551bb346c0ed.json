{"ast":null,"code":"var _jsxFileName = \"/home/andres/Desktop/codeTheDream/assignments/react-section-1-andresochoa91/tictactoe/src/components/Cell.js\";\nimport React, { Component } from 'react';\nimport styled from \"styled-components\";\nimport Square from './Square'; // import { Button } from 'react-bootstrap';\n//Styled components\n\nexport const Col = styled.div`\n  border: solid 1px #000;\n  width: 33%;\n  height: auto;\n  margin: 1px;\n  cursor: pointer;\n`;\nconst Content = styled.div`\n  ${Col}:hover {\n    background-color: #ccc;\n  }\n  display: flex;\n  flex-wrap: wrap;\n  width: 150px; \n`;\nconst Button = styled.button`\n  background-color: ${props => props.primary};\n  border: none;\n  border-radius: 5px;\n  width: 80px;\n  height: 30px;\n`;\n\nclass Cell extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      color: \"#f00\",\n      count: 0,\n      playing: true,\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      player: \"Red\"\n    };\n\n    this.changeColor = event => {\n      const newBoard = [...this.state.board];\n      newBoard[event.target.id] = \"#f00\";\n      this.setState({\n        board: newBoard\n      }); // this.setState.board[event.target.id])\n      // if (!event.target.style.backgroundColor && this.state.playing === true) {\n      //   event.target.style.backgroundColor = this.state.color;\n      //   if (this.state.color === \"#f00\") {\n      //     this.setState({ \n      //       color: \"#0f0\",\n      //       player: \"Red\" \n      //     })  \n      //   } else {\n      //     this.setState({ \n      //       color: \"#f00\",\n      //       player: \"Green\"\n      //     })\n      //   }\n      //   this.setState({ board: this.state.board.map((sq, id) => (id === Number(event.target.id) ? this.state.color : sq))})\n      //   this.setState({ count: this.state.count + 1 });\n      // }\n    };\n\n    this.validation = (num1, num2, num3) => {\n      return this.state.board[num1] && this.state.board[num1] === this.state.board[num2] && this.state.board[num2] === this.state.board[num3];\n    };\n\n    this.conditions = () => {\n      return this.validation(0, 1, 2) || this.validation(3, 4, 5) || this.validation(6, 7, 8) || this.validation(0, 3, 6) || this.validation(1, 4, 7) || this.validation(2, 5, 8) || this.validation(0, 4, 8) || this.validation(2, 4, 6);\n    };\n\n    this.isEven = number => {\n      return number % 2 === 0;\n    };\n\n    this.restart = () => {\n      for (let i = 0; i < 9; i++) {\n        document.getElementById(i).style.backgroundColor = \"\";\n      }\n\n      this.setState({\n        playing: true\n      });\n    };\n  }\n\n  componentDidUpdate() {// if (this.conditions() || this.state.count === 9) {\n    //   if (this.conditions()) {\n    //     alert(`${this.state.player} wins`);\n    //   } else {\n    //     alert(\"Tie\");\n    //   }\n    //   this.setState({\n    //     color: \"#f00\",\n    //     count: 0,\n    //     playing: false,\n    //     board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    //     player: \"Red\"\n    //   })\n    // } \n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, this.state.board.map((num, i) => {\n      return /*#__PURE__*/React.createElement(Square, {\n        key: i,\n        id: i,\n        changeColor: this.changeColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 22\n        }\n      });\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      primary: this.state.color,\n      onClick: this.restart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, \"Restart\")));\n  }\n\n}\n\nexport default Cell;","map":{"version":3,"sources":["/home/andres/Desktop/codeTheDream/assignments/react-section-1-andresochoa91/tictactoe/src/components/Cell.js"],"names":["React","Component","styled","Square","Col","div","Content","Button","button","props","primary","Cell","state","color","count","playing","board","player","changeColor","event","newBoard","target","id","setState","validation","num1","num2","num3","conditions","isEven","number","restart","i","document","getElementById","style","backgroundColor","componentDidUpdate","render","map","num"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styled from \"styled-components\";\nimport Square from './Square';\n// import { Button } from 'react-bootstrap';\n\n//Styled components\nexport const Col = styled.div`\n  border: solid 1px #000;\n  width: 33%;\n  height: auto;\n  margin: 1px;\n  cursor: pointer;\n`;\n\nconst Content= styled.div`\n  ${Col}:hover {\n    background-color: #ccc;\n  }\n  display: flex;\n  flex-wrap: wrap;\n  width: 150px; \n`;\n\nconst Button = styled.button`\n  background-color: ${(props) => props.primary};\n  border: none;\n  border-radius: 5px;\n  width: 80px;\n  height: 30px;\n`;\n\nclass Cell extends Component {\n\n  state = {\n    color: \"#f00\",\n    count: 0,\n    playing: true,\n    board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    player: \"Red\",\n  }\n\n  changeColor = (event) => {\n    const newBoard = [...this.state.board];\n    newBoard[event.target.id] = \"#f00\";\n    this.setState({ board: newBoard });\n    // this.setState.board[event.target.id])\n    // if (!event.target.style.backgroundColor && this.state.playing === true) {\n    //   event.target.style.backgroundColor = this.state.color;\n    //   if (this.state.color === \"#f00\") {\n    //     this.setState({ \n    //       color: \"#0f0\",\n    //       player: \"Red\" \n    //     })  \n    //   } else {\n    //     this.setState({ \n    //       color: \"#f00\",\n    //       player: \"Green\"\n    //     })\n    //   }\n    //   this.setState({ board: this.state.board.map((sq, id) => (id === Number(event.target.id) ? this.state.color : sq))})\n    //   this.setState({ count: this.state.count + 1 });\n    // }\n  }\n\n  componentDidUpdate () {\n    // if (this.conditions() || this.state.count === 9) {\n    //   if (this.conditions()) {\n    //     alert(`${this.state.player} wins`);\n    //   } else {\n    //     alert(\"Tie\");\n    //   }\n    //   this.setState({\n    //     color: \"#f00\",\n    //     count: 0,\n    //     playing: false,\n    //     board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    //     player: \"Red\"\n    //   })\n    // } \n  }\n\n  validation = (num1, num2, num3) => {\n    return this.state.board[num1] &&\n           this.state.board[num1] === this.state.board[num2] &&\n           this.state.board[num2] === this.state.board[num3]\n  }\n  \n  conditions = () => {\n    return (this.validation(0, 1, 2) || this.validation(3, 4, 5) || this.validation(6, 7, 8) ||\n            this.validation(0, 3, 6) || this.validation(1, 4, 7) || this.validation(2, 5, 8) ||\n            this.validation(0, 4, 8) || this.validation(2, 4, 6)                   \n    );\n  }\n\n  isEven = (number) => {\n    return (number % 2 === 0);\n  }\n\n  restart = () => {\n    for (let i = 0; i < 9; i++) {\n      document.getElementById(i).style.backgroundColor = \"\";\n    }\n    this.setState({ \n      playing: true \n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Content>\n          {\n            this.state.board.map((num, i) => {\n              return <Square key={i} id={i} changeColor={ this.changeColor }/>\n            })\n          }\n        </Content>  \n        <br/>\n        <p>\n          <Button primary={this.state.color} onClick={this.restart}>Restart</Button>\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}