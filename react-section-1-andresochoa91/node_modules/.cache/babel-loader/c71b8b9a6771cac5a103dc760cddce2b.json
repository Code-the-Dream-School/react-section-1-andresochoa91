{"ast":null,"code":"var _jsxFileName = \"/home/andres/Desktop/codeTheDream/assignments/react-section-1-andresochoa91/tictactoe/src/components/Cell.js\";\nimport React, { Component } from 'react';\nimport styled from \"styled-components\";\nimport { Square } from './Square'; //Styled components\n\nconst Board = styled.div`\n  display: flex;\n  justify-content: center;\n  text-align: center;\n`;\nconst Content = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 216px;\n`;\nconst Button = styled.button` \n  padding: 5px 15px;\n  margin: 30px auto;\n  font-size: 20px;\n  background-color: #3c9;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  :hover {\n    background-color: #1a7;\n  }\n`;\nconst Players = styled.div``;\nconst Buttons = styled.div``;\nconst Body = styled.div`\n  ${Players}, ${Buttons} {\n    display: flex;\n    justify-content: space-around;\n  }\n`;\nconst Paragraph = styled.p`\n  font-size: 25px;\n  border: ${props => props.primary} solid 1px;\n  border-radius: 5px;\n  color: ${props => props.primary};\n  padding: 2px 15px;\n`;\nconst Banner = styled.div`\n  background-color: ${props => props.color};\n  color: #fff;\n  text-align: center;\n  border-radius: 15px;\n  width: 90px;\n  margin: auto;\n`;\n\nclass Cell extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      color: \"#6af\",\n      count: 0,\n      playing: true,\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      player: this.props.player1,\n      winner: \"\"\n    };\n\n    this.changeColor = event => {\n      const {\n        color,\n        playing,\n        board\n      } = this.state;\n\n      if (!board[event.target.id] && playing === true) {\n        const newBoard = [...board];\n        newBoard[event.target.id] = color;\n        this.setState({\n          board: newBoard\n        });\n\n        if (color === \"#6af\") {\n          this.setState({\n            color: \"#f6c\",\n            player: this.props.player1\n          });\n        } else {\n          this.setState({\n            color: \"#6af\",\n            player: this.props.player2\n          });\n        }\n\n        this.setState({\n          count: this.state.count + 1\n        });\n      }\n    };\n\n    this.validation = (num1, num2, num3) => {\n      let board = this.state.board;\n      return board[num1] && board[num1] === board[num2] && board[num2] === board[num3];\n    };\n\n    this.conditions = () => {\n      let val = this.validation;\n      return val(0, 1, 2) || val(3, 4, 5) || val(6, 7, 8) || val(0, 3, 6) || val(1, 4, 7) || val(2, 5, 8) || val(0, 4, 8) || val(2, 4, 6);\n    };\n\n    this.isEven = number => {\n      return number % 2 === 0;\n    };\n\n    this.restart = () => {\n      this.setState({\n        playing: true,\n        board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        color: \"#6af\",\n        count: 0\n      });\n    };\n  }\n\n  componentDidUpdate() {\n    const {\n      count,\n      playing,\n      player\n    } = this.state;\n\n    if ((this.conditions() || count === 9) && playing === true) {\n      this.setState({\n        playing: false,\n        player: this.state.player1\n      });\n\n      if (this.conditions()) {\n        alert(`${player} wins`);\n        this.setState({\n          winner: player\n        });\n      } else {\n        alert(\"Tie\");\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, this.state.winner && /*#__PURE__*/React.createElement(Banner, {\n      color: \"#1a7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 32\n      }\n    }, this.state.winner, \" wins\"), /*#__PURE__*/React.createElement(Players, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Paragraph, {\n      primary: \"#6af\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, this.props.player1), this.state.color === \"#6af\" && this.state.playing && /*#__PURE__*/React.createElement(Banner, {\n      color: \"#e69500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 70\n      }\n    }, \"Your turn\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Paragraph, {\n      primary: \"#f6c\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, this.props.player2), this.state.color !== \"#6af\" && this.state.playing && /*#__PURE__*/React.createElement(Banner, {\n      color: \"#e69500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 68\n      }\n    }, \"Your turn\"))), /*#__PURE__*/React.createElement(Board, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, this.state.board.map((num, i) => /*#__PURE__*/React.createElement(Square, {\n      key: i,\n      id: i,\n      color: num,\n      changeColor: this.changeColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 48\n      }\n    })))), /*#__PURE__*/React.createElement(Buttons, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.restart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }, \"Restart\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.props.onClickNewGameButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }\n    }, \"New Game\")));\n  }\n\n}\n\nexport default Cell;","map":{"version":3,"sources":["/home/andres/Desktop/codeTheDream/assignments/react-section-1-andresochoa91/tictactoe/src/components/Cell.js"],"names":["React","Component","styled","Square","Board","div","Content","Button","button","Players","Buttons","Body","Paragraph","p","props","primary","Banner","color","Cell","state","count","playing","board","player","player1","winner","changeColor","event","target","id","newBoard","setState","player2","validation","num1","num2","num3","conditions","val","isEven","number","restart","componentDidUpdate","alert","render","map","num","i","onClickNewGameButton"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styled from \"styled-components\";\nimport { Square } from './Square';\n\n//Styled components\n\nconst Board = styled.div`\n  display: flex;\n  justify-content: center;\n  text-align: center;\n`;\n\nconst Content= styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 216px;\n`;\n\nconst Button = styled.button` \n  padding: 5px 15px;\n  margin: 30px auto;\n  font-size: 20px;\n  background-color: #3c9;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  :hover {\n    background-color: #1a7;\n  }\n`;\n\nconst Players = styled.div``;\nconst Buttons = styled.div``;\n\nconst Body = styled.div`\n  ${Players}, ${Buttons} {\n    display: flex;\n    justify-content: space-around;\n  }\n`;\n\nconst Paragraph = styled.p`\n  font-size: 25px;\n  border: ${(props) => props.primary} solid 1px;\n  border-radius: 5px;\n  color: ${(props) => props.primary};\n  padding: 2px 15px;\n`;\n\nconst Banner = styled.div`\n  background-color: ${props => props.color};\n  color: #fff;\n  text-align: center;\n  border-radius: 15px;\n  width: 90px;\n  margin: auto;\n`;\n\nclass Cell extends Component {\n  state = {\n    color: \"#6af\",\n    count: 0,\n    playing: true,\n    board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    player: this.props.player1,\n    winner: \"\"\n  }\n  \n  changeColor = (event) => {\n\n    const { color, playing, board } = this.state;\n\n    if (!board[event.target.id] && playing === true) {    \n      const newBoard = [...board];\n      newBoard[event.target.id] = color;\n      this.setState({ board: newBoard });\n\n      if (color === \"#6af\") {\n        this.setState({ \n          color: \"#f6c\",\n          player: this.props.player1,\n        })  \n      } else {\n        this.setState({ \n          color: \"#6af\",\n          player: this.props.player2,\n        })\n      }\n      this.setState({ count: this.state.count + 1 });\n    }\n  }\n\n  componentDidUpdate () {\n    const { count, playing, player} = this.state;\n    if ((this.conditions() || count === 9) && playing === true) {\n      this.setState({\n        playing: false,\n        player: this.state.player1\n      })\n      if (this.conditions()) {\n        alert(`${player} wins`);\n        this.setState({ winner: player })\n      } else {\n        alert(\"Tie\");\n      }\n    } \n  }\n\n  validation = (num1, num2, num3) => {\n    let board = this.state.board;\n    return board[num1] &&\n           board[num1] === board[num2] &&\n           board[num2] === board[num3]\n  }\n  \n  conditions = () => {\n    let val = this.validation;\n    return (val(0, 1, 2) || val(3, 4, 5) || val(6, 7, 8) ||\n            val(0, 3, 6) || val(1, 4, 7) || val(2, 5, 8) ||\n            val(0, 4, 8) || val(2, 4, 6)                   \n    );\n  }\n\n  isEven = (number) => {\n    return (number % 2 === 0);\n  }\n\n  restart = () => {\n    this.setState({ \n      playing: true,\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      color: \"#6af\",\n      count: 0\n    })\n  }\n\n  render() {\n    return (\n      <Body>\n        { this.state.winner && <Banner color=\"#1a7\">{this.state.winner} wins</Banner>}\n        <Players>\n          <div>\n            <Paragraph primary=\"#6af\">{ this.props.player1 }</Paragraph>\n            { (this.state.color === \"#6af\" && this.state.playing) && <Banner color=\"#e69500\">Your turn</Banner> }\n            { /* (!this.state.playing && this.state.color !== \"#6af\" && this.state.count < 8) && <Banner color=\"#1a7\">You win</Banner>  */}\n            { /* (this.state.count >= 9) && <Banner color=\"#f00\">Tie</Banner> */ }\n          </div>\n          <div>\n          <Paragraph primary=\"#f6c\">{ this.props.player2 }</Paragraph>\n          { (this.state.color !== \"#6af\" && this.state.playing) && <Banner color=\"#e69500\">Your turn</Banner> }\n          { /* (!this.state.playing && this.state.color === \"#6af\") && <Banner color=\"#1a7\">You win</Banner>  */}\n          { /* (this.state.count >= 9) && <Banner color=\"#f00\">Tie</Banner> */ }\n          </div>\n        </Players>\n        <Board>\n          <Content>\n            { this.state.board.map((num, i) => <Square key={i} id={i} color={num} changeColor={ this.changeColor }/>) }\n          </Content>  \n        </Board>\n        <Buttons>\n          <Button onClick={this.restart}>Restart</Button>\n          <Button onClick={this.props.onClickNewGameButton}>New Game</Button>\n        </Buttons>\n      </Body>\n    )\n  }\n}\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}