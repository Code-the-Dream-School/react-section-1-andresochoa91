{"ast":null,"code":"var _jsxFileName = \"/home/andres/Desktop/codeTheDream/assignments/react-section-1-andresochoa91/tictactoe/src/components/Cell.js\";\nimport React, { Component } from 'react';\nimport styled from \"styled-components\";\nimport { Square, Col } from './Square'; //Styled components\n\nconst Content = styled.div`\n  ${Col}:hover {\n    background-color: #ccc;\n  }\n  display: flex;\n  flex-wrap: wrap;\n  width: 150px; \n`;\nconst Button = styled.button`\n  background-color: ${props => props.primary};\n  border: none;\n  border-radius: 5px;\n  width: 130px;\n  height: 30px;\n`;\n\nclass Cell extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      color: \"#f00\",\n      count: 0,\n      playing: true,\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      player: \"Red\"\n    };\n\n    this.changeColor = event => {\n      const {\n        color,\n        playing,\n        board\n      } = this.state;\n\n      if (!board[event.target.id] && playing === true) {\n        const newBoard = [...board];\n        newBoard[event.target.id] = color;\n        this.setState({\n          board: newBoard\n        });\n\n        if (color === \"#f00\") {\n          this.setState({\n            color: \"#0f0\",\n            player: \"Red\"\n          });\n        } else {\n          this.setState({\n            color: \"#f00\",\n            player: \"Green\"\n          });\n        }\n\n        this.setState({\n          count: this.state.count + 1\n        });\n      }\n    };\n\n    this.validation = (num1, num2, num3) => {\n      let board = this.state.board;\n      return board[num1] && board[num1] === board[num2] && board[num2] === board[num3];\n    };\n\n    this.conditions = () => {\n      let val = this.validation;\n      return val(0, 1, 2) || val(3, 4, 5) || val(6, 7, 8) || val(0, 3, 6) || val(1, 4, 7) || val(2, 5, 8) || val(0, 4, 8) || val(2, 4, 6);\n    };\n\n    this.isEven = number => {\n      return number % 2 === 0;\n    };\n\n    this.restart = () => {\n      this.setState({\n        playing: true,\n        board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n      });\n    };\n  }\n\n  componentDidUpdate() {\n    const {\n      count,\n      playing,\n      player\n    } = this.state;\n\n    if ((this.conditions() || count === 9) && playing === true) {\n      if (this.conditions()) {\n        alert(`${player} wins`);\n      } else {\n        alert(\"Tie\");\n      }\n\n      this.setState({\n        color: \"#f00\",\n        count: 0,\n        playing: false,\n        player: \"Red\"\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, this.state.board.map((num, i) => /*#__PURE__*/React.createElement(Square, {\n      key: i,\n      id: i,\n      color: num,\n      changeColor: this.changeColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 46\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      primary: this.state.color,\n      onClick: this.restart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, \"Restart\"), /*#__PURE__*/React.createElement(Button, {\n      primary: this.state.color,\n      onClick: this.props.onClickNewGameButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, \"New Game\"));\n  }\n\n}\n\nexport default Cell;","map":{"version":3,"sources":["/home/andres/Desktop/codeTheDream/assignments/react-section-1-andresochoa91/tictactoe/src/components/Cell.js"],"names":["React","Component","styled","Square","Col","Content","div","Button","button","props","primary","Cell","state","color","count","playing","board","player","changeColor","event","target","id","newBoard","setState","validation","num1","num2","num3","conditions","val","isEven","number","restart","componentDidUpdate","alert","render","map","num","i","onClickNewGameButton"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styled from \"styled-components\";\nimport { Square, Col} from './Square';\n\n//Styled components\n\nconst Content= styled.div`\n  ${Col}:hover {\n    background-color: #ccc;\n  }\n  display: flex;\n  flex-wrap: wrap;\n  width: 150px; \n`;\n\nconst Button = styled.button`\n  background-color: ${(props) => props.primary};\n  border: none;\n  border-radius: 5px;\n  width: 130px;\n  height: 30px;\n`;\n\nclass Cell extends Component {\n  state = {\n    color: \"#f00\",\n    count: 0,\n    playing: true,\n    board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    player: \"Red\",\n  }\n  \n  changeColor = (event) => {\n\n    const { color, playing, board } = this.state;\n\n    if (!board[event.target.id] && playing === true) {    \n      const newBoard = [...board];\n      newBoard[event.target.id] = color;\n      this.setState({ board: newBoard });\n\n      if (color === \"#f00\") {\n        this.setState({ \n          color: \"#0f0\",\n          player: \"Red\" \n        })  \n      } else {\n        this.setState({ \n          color: \"#f00\",\n          player: \"Green\"\n        })\n      }\n      this.setState({ count: this.state.count + 1 });\n    }\n  }\n\n  componentDidUpdate () {\n    const { count, playing, player} = this.state;\n    if ((this.conditions() || count === 9) && playing === true) {\n      if (this.conditions()) {\n        alert(`${player} wins`);\n      } else {\n        alert(\"Tie\");\n      }\n      this.setState({\n        color: \"#f00\",\n        count: 0,\n        playing: false,\n        player: \"Red\"\n      })\n    } \n  }\n\n  validation = (num1, num2, num3) => {\n    let board = this.state.board;\n    return board[num1] &&\n           board[num1] === board[num2] &&\n           board[num2] === board[num3]\n  }\n  \n  conditions = () => {\n    let val = this.validation;\n    return (val(0, 1, 2) || val(3, 4, 5) || val(6, 7, 8) ||\n            val(0, 3, 6) || val(1, 4, 7) || val(2, 5, 8) ||\n            val(0, 4, 8) || val(2, 4, 6)                   \n    );\n  }\n\n  isEven = (number) => {\n    return (number % 2 === 0);\n  }\n\n  restart = () => {\n    this.setState({ \n      playing: true,\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Content>\n          { this.state.board.map((num, i) => <Square key={i} id={i} color={num} changeColor={ this.changeColor }/>) }\n        </Content>  \n        <br/>\n        <Button primary={this.state.color} onClick={this.restart}>Restart</Button>\n        <Button primary={this.state.color} onClick={this.props.onClickNewGameButton}>New Game</Button>\n      </div>\n    )\n  }\n}\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}