{"ast":null,"code":"var _jsxFileName = \"/home/andres/Desktop/codeTheDream/assignments/react-section-1-andresochoa91/tictactoe/src/components/Cell.js\";\nimport styled from \"styled-components\";\nimport React, { Component } from 'react';\nimport Square from './Square'; //Styled components\n\nconst Board = styled.div`\n  display: flex;\n  justify-content: center;\n  text-align: center;\n`;\nconst Content = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 216px;\n`;\nconst Button = styled.button` \n  padding: 5px 15px;\n  margin: 30px auto;\n  font-size: 20px;\n  background-color: #3c9;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  :hover {\n    background-color: #1a7;\n  }\n`;\nconst Players = styled.div``;\nconst Buttons = styled.div``;\nconst Body = styled.div`\n  ${Players}, ${Buttons} {\n    display: flex;\n    justify-content: space-around;\n  }\n`;\nconst Paragraph = styled.p`\n  font-size: 25px;\n  border: ${props => props.primary} solid 2px;\n  border-radius: 5px;\n  color: ${props => props.primary};\n  padding: 2px 15px;\n`;\nconst Banner = styled.div`\n  background-color: ${props => props.color};\n  color: #fff;\n  text-align: center;\n  border-radius: 10px;\n  width: 100px;\n  margin: auto;\n  padding: auto 5px;\n`;\n\nclass Cell extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      color: \"#6af\",\n      count: 0,\n      playing: true,\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      player: this.props.player1,\n      winner: \"\"\n    };\n\n    this.changeColor = event => {\n      const {\n        player1,\n        player2\n      } = this.props;\n      const {\n        color,\n        playing,\n        board\n      } = this.state;\n\n      if (!board[event.target.id] && playing === true) {\n        const newBoard = [...board];\n        newBoard[event.target.id] = color;\n        this.setState({\n          board: newBoard\n        });\n\n        if (color === \"#6af\") {\n          this.setState({\n            color: \"#f6c\",\n            player: player1\n          });\n        } else {\n          this.setState({\n            color: \"#6af\",\n            player: player2\n          });\n        }\n\n        this.setState(prevState => ({\n          count: prevState.count + 1\n        }));\n      }\n    };\n\n    this.validation = (num1, num2, num3) => {\n      let board = this.state.board;\n      return board[num1] && board[num1] === board[num2] && board[num2] === board[num3];\n    };\n\n    this.conditions = () => {\n      let val = this.validation;\n      return val(0, 1, 2) || val(3, 4, 5) || val(6, 7, 8) || val(0, 3, 6) || val(1, 4, 7) || val(2, 5, 8) || val(0, 4, 8) || val(2, 4, 6);\n    };\n\n    this.restart = () => {\n      this.setState({\n        playing: true,\n        board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        color: \"#6af\",\n        count: 0,\n        winner: \"\"\n      });\n    };\n  }\n\n  componentDidUpdate() {\n    const {\n      count,\n      playing,\n      player,\n      player1\n    } = this.state;\n\n    if ((this.conditions() || count === 9) && playing === true) {\n      this.setState({\n        playing: false,\n        player: player1\n      });\n\n      if (this.conditions()) {\n        alert(`${player} wins`);\n        this.setState({\n          winner: player\n        });\n      } else {\n        alert(\"Tie\");\n      }\n    }\n  }\n\n  render() {\n    const {\n      winner,\n      count,\n      color,\n      playing,\n      board\n    } = this.state;\n    const {\n      player1,\n      player2,\n      onClickNewGameButton\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }, winner && /*#__PURE__*/React.createElement(Banner, {\n      color: \"#1a7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }\n    }, winner, \" wins\"), !winner && count === 9 && /*#__PURE__*/React.createElement(Banner, {\n      color: \"#e69500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 39\n      }\n    }, \"Tie\"), /*#__PURE__*/React.createElement(Players, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Paragraph, {\n      primary: \"#6af\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, player1), color === \"#6af\" && playing && /*#__PURE__*/React.createElement(Banner, {\n      color: \"#e69500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 48\n      }\n    }, \"Your turn\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Paragraph, {\n      primary: \"#f6c\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, player2), color !== \"#6af\" && playing && /*#__PURE__*/React.createElement(Banner, {\n      color: \"#e69500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 48\n      }\n    }, \"Your turn\"))), /*#__PURE__*/React.createElement(Board, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }, board.map((num, i) => /*#__PURE__*/React.createElement(Square, {\n      key: i,\n      id: i,\n      color: num,\n      changeColor: this.changeColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 37\n      }\n    })))), /*#__PURE__*/React.createElement(Buttons, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.restart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }\n    }, \"Restart\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: onClickNewGameButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }, \"New Game\")));\n  }\n\n}\n\nexport default Cell;","map":{"version":3,"sources":["/home/andres/Desktop/codeTheDream/assignments/react-section-1-andresochoa91/tictactoe/src/components/Cell.js"],"names":["styled","React","Component","Square","Board","div","Content","Button","button","Players","Buttons","Body","Paragraph","p","props","primary","Banner","color","Cell","state","count","playing","board","player","player1","winner","changeColor","event","player2","target","id","newBoard","setState","prevState","validation","num1","num2","num3","conditions","val","restart","componentDidUpdate","alert","render","onClickNewGameButton","map","num","i"],"mappings":"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","sourcesContent":["import styled from \"styled-components\";\nimport React, { Component } from 'react';\nimport Square from './Square';\n\n//Styled components\n\nconst Board = styled.div`\n  display: flex;\n  justify-content: center;\n  text-align: center;\n`;\n\nconst Content= styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 216px;\n`;\n\nconst Button = styled.button` \n  padding: 5px 15px;\n  margin: 30px auto;\n  font-size: 20px;\n  background-color: #3c9;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  :hover {\n    background-color: #1a7;\n  }\n`;\n\nconst Players = styled.div``;\nconst Buttons = styled.div``;\n\nconst Body = styled.div`\n  ${Players}, ${Buttons} {\n    display: flex;\n    justify-content: space-around;\n  }\n`;\n\nconst Paragraph = styled.p`\n  font-size: 25px;\n  border: ${(props) => props.primary} solid 2px;\n  border-radius: 5px;\n  color: ${(props) => props.primary};\n  padding: 2px 15px;\n`;\n\nconst Banner = styled.div`\n  background-color: ${props => props.color};\n  color: #fff;\n  text-align: center;\n  border-radius: 10px;\n  width: 100px;\n  margin: auto;\n  padding: auto 5px;\n`;\n\nclass Cell extends Component {\n  state = {\n    color: \"#6af\",\n    count: 0,\n    playing: true,\n    board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    player: this.props.player1,\n    winner: \"\"\n  }\n  \n  changeColor = (event) => {\n    const { player1, player2 } = this.props;\n    const { color, playing, board } = this.state;\n\n    if (!board[event.target.id] && playing === true) {    \n      const newBoard = [...board];\n      newBoard[event.target.id] = color;\n      this.setState({ board: newBoard });\n\n      if (color === \"#6af\") {\n        this.setState({ \n          color: \"#f6c\",\n          player: player1,\n        })  \n      } else {\n        this.setState({ \n          color: \"#6af\",\n          player: player2,\n        })\n      }\n      this.setState( prevState => ({\n         count: prevState.count + 1 \n      }));\n    }\n  }\n\n  componentDidUpdate () {\n    const { count, playing, player, player1 } = this.state;\n    if ((this.conditions() || count === 9) && playing === true) {\n      this.setState({\n        playing: false,\n        player: player1\n      })\n      if (this.conditions()) {\n        alert(`${player} wins`);\n        this.setState({ winner: player })\n      } else {\n        alert(\"Tie\");\n      }\n    } \n  }\n\n  validation = (num1, num2, num3) => {\n    let board = this.state.board;\n    return board[num1] &&\n           board[num1] === board[num2] &&\n           board[num2] === board[num3]\n  }\n  \n  conditions = () => {\n    let val = this.validation;\n    return (val(0, 1, 2) || val(3, 4, 5) || val(6, 7, 8) ||\n            val(0, 3, 6) || val(1, 4, 7) || val(2, 5, 8) ||\n            val(0, 4, 8) || val(2, 4, 6)                   \n    );\n  }\n\n  restart = () => {\n    this.setState({ \n      playing: true,\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      color: \"#6af\",\n      count: 0,\n      winner: \"\"\n    })\n  }\n\n  render() {\n    const { winner, count, color, playing, board } = this.state;\n    const { player1, player2, onClickNewGameButton } = this.props;\n    return (\n      <Body>\n        { winner && <Banner color=\"#1a7\">{winner} wins</Banner>}\n        { (!winner && count === 9) && <Banner color=\"#e69500\">Tie</Banner>}\n        <Players>\n          <div>\n            <Paragraph primary=\"#6af\">{ player1 }</Paragraph>\n            { (color === \"#6af\" && playing) && <Banner color=\"#e69500\">Your turn</Banner> }\n          </div>\n          <div>\n            <Paragraph primary=\"#f6c\">{ player2 }</Paragraph>\n            { (color !== \"#6af\" && playing) && <Banner color=\"#e69500\">Your turn</Banner> }\n          </div>\n        </Players>\n        <Board>\n          <Content>\n            { board.map((num, i) => <Square key={ i } \n                                            id={ i } \n                                            color={ num } \n                                            changeColor={ this.changeColor }\n                                    />\n            ) }\n          </Content>  \n        </Board>\n        <Buttons>\n          <Button onClick={ this.restart }>Restart</Button>\n          <Button onClick={ onClickNewGameButton }>New Game</Button>\n        </Buttons>\n      </Body>\n    )\n  }\n}\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}