{"ast":null,"code":"var _jsxFileName = \"/home/andres/Desktop/codeTheDream/assignments/front-end2/react-section-1-andresochoa91/src/components/Cell.js\";\n// import React, { Component } from 'react';\nimport React, { useContext, useState, useEffect } from 'react';\nimport styled from \"styled-components\";\nimport { Square } from './Square';\nimport { TictactoeContext } from '../Context'; // import PropTypes from 'prop-types';\n//Styled components\n\nconst Board = styled.div`\n  display: flex;\n  justify-content: center;\n  text-align: center;\n`;\nconst Content = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 216px;\n`;\nconst Button = styled.button` \n  padding: 5px 15px;\n  margin: 30px auto;\n  font-size: 20px;\n  background-color: #3c9;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  :hover {\n    background-color: #1a7;\n  }\n`;\nconst Players = styled.div``;\nconst Buttons = styled.div``;\nconst Body = styled.div`\n  ${Players}, ${Buttons} {\n    display: flex;\n    justify-content: space-around;\n  }\n`;\nconst Paragraph = styled.p`\n  font-size: 25px;\n  border: ${props => props.primary} solid 2px;\n  border-radius: 5px;\n  color: ${props => props.primary};\n  padding: 2px 15px;\n`;\nconst Banner = styled.div`\n  background-color: ${props => props.color};\n  color: #fff;\n  text-align: center;\n  border-radius: 10px;\n  width: 100px;\n  margin: auto;\n  padding: auto 5px;\n`;\n\nconst Cell = () => {\n  // static propTypes = {\n  //   player1: PropTypes.string,\n  //   player2: PropTypes.string,\n  // }\n  const [color, setColor] = useState(\"#6af\");\n  const [count, setCount] = useState(0);\n  const [playing, setPlaying] = useState(true);\n  const [board, setBoard] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n  const [winner, setWinner] = useState(\"\");\n  const {\n    player1,\n    player2,\n    actions\n  } = useContext(TictactoeContext);\n\n  const changeColor = event => {\n    if (!board[event.target.id] && playing === true) {\n      const newBoard = [...board];\n      newBoard[event.target.id] = color; // this.setState({ board: newBoard });\n\n      setBoard(newBoard);\n\n      if (color === \"#6af\") {\n        // this.setState({ \n        //   color: \"#f6c\",\n        // })\n        setColor(\"#f6c\");\n      } else {\n        // this.setState({ \n        //   color: \"#6af\",\n        // })\n        setColor(\"#6af\");\n      } // this.setState( prevState => ({\n      //    count: prevState.count + 1 \n      // }));\n\n\n      setCount(count + 1);\n    }\n  }; // componentDidUpdate () {\n  //   const { count, playing } = this.state;\n  //   if ((this.conditions() || count === 9) && playing === true) {\n  //     this.setState({\n  //       playing: false,\n  //     })\n  //     if (this.conditions()) {\n  //       alert(`${ this.chooseWinner() } wins`);\n  //       this.setState({ winner: `${ this.chooseWinner() }` })\n  //     } else {\n  //       alert(\"Tie\");\n  //     }\n  //   } \n  // }\n\n\n  const isPlayer1sTurn = () => {\n    return color === \"#6af\";\n  };\n\n  const restart = () => {\n    // this.setState({ \n    //   playing: true,\n    //   board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    //   color: \"#6af\",\n    //   count: 0,\n    //   winner: \"\"\n    // })\n    setPlaying(true);\n    setBoard([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n    setColor(\"#6af\");\n    setCount(0);\n    setWinner(\"\");\n  };\n\n  useEffect(() => {\n    const validation = (num1, num2, num3) => {\n      return board[num1] && board[num1] === board[num2] && board[num2] === board[num3];\n    };\n\n    const chooseWinner = () => {\n      return color === \"#6af\" ? player2 : player1;\n    };\n\n    const conditions = () => {\n      let val = validation;\n      return val(0, 1, 2) || val(3, 4, 5) || val(6, 7, 8) || val(0, 3, 6) || val(1, 4, 7) || val(2, 5, 8) || val(0, 4, 8) || val(2, 4, 6);\n    };\n\n    const cond = conditions();\n    const chw = chooseWinner();\n\n    if ((cond || count === 9) && playing === true) {\n      // this.setState({\n      //   playing: false,\n      // })\n      setPlaying(false);\n\n      if (cond) {\n        alert(`${chw()} wins`); // this.setState({ winner: `${ this.chooseWinner() }` })\n\n        setWinner(chw());\n      } else {\n        alert(\"Tie\");\n      }\n    }\n  }, [count, playing, color, player1, player2]);\n  return /*#__PURE__*/React.createElement(Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 5\n    }\n  }, winner && /*#__PURE__*/React.createElement(Banner, {\n    color: \"#1a7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 19\n    }\n  }, winner, \" wins\"), !winner && count === 9 && /*#__PURE__*/React.createElement(Banner, {\n    color: \"#e69500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 37\n    }\n  }, \"Tie\"), /*#__PURE__*/React.createElement(Players, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paragraph, {\n    primary: \"#6af\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, player1), isPlayer1sTurn() && playing && /*#__PURE__*/React.createElement(Banner, {\n    color: \"#e69500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 46\n    }\n  }, \"Your turn\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paragraph, {\n    primary: \"#f6c\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, player2), color !== \"#6af\" && playing && /*#__PURE__*/React.createElement(Banner, {\n    color: \"#e69500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 46\n    }\n  }, \"Your turn\"))), /*#__PURE__*/React.createElement(Board, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }, board.map((num, i) => /*#__PURE__*/React.createElement(Square, {\n    key: i,\n    id: i,\n    color: num,\n    changeColor: changeColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(Buttons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: restart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, \"Restart\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: actions.onClickNewGameButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, \"New Game\")));\n};\n\nexport default Cell;","map":{"version":3,"sources":["/home/andres/Desktop/codeTheDream/assignments/front-end2/react-section-1-andresochoa91/src/components/Cell.js"],"names":["React","useContext","useState","useEffect","styled","Square","TictactoeContext","Board","div","Content","Button","button","Players","Buttons","Body","Paragraph","p","props","primary","Banner","color","Cell","setColor","count","setCount","playing","setPlaying","board","setBoard","winner","setWinner","player1","player2","actions","changeColor","event","target","id","newBoard","isPlayer1sTurn","restart","validation","num1","num2","num3","chooseWinner","conditions","val","cond","chw","alert","map","num","i","onClickNewGameButton"],"mappings":"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","sourcesContent":["// import React, { Component } from 'react';\nimport React, { useContext, useState, useEffect } from 'react';\nimport styled from \"styled-components\";\nimport { Square } from './Square';\nimport { TictactoeContext } from '../Context';\n// import PropTypes from 'prop-types';\n\n//Styled components\n\nconst Board = styled.div`\n  display: flex;\n  justify-content: center;\n  text-align: center;\n`;\n\nconst Content= styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 216px;\n`;\n\nconst Button = styled.button` \n  padding: 5px 15px;\n  margin: 30px auto;\n  font-size: 20px;\n  background-color: #3c9;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  :hover {\n    background-color: #1a7;\n  }\n`;\n\nconst Players = styled.div``;\nconst Buttons = styled.div``;\n\nconst Body = styled.div`\n  ${Players}, ${Buttons} {\n    display: flex;\n    justify-content: space-around;\n  }\n`;\n\nconst Paragraph = styled.p`\n  font-size: 25px;\n  border: ${(props) => props.primary} solid 2px;\n  border-radius: 5px;\n  color: ${(props) => props.primary};\n  padding: 2px 15px;\n`;\n\nconst Banner = styled.div`\n  background-color: ${props => props.color};\n  color: #fff;\n  text-align: center;\n  border-radius: 10px;\n  width: 100px;\n  margin: auto;\n  padding: auto 5px;\n`;\n\nconst Cell = () => {\n\n  // static propTypes = {\n  //   player1: PropTypes.string,\n  //   player2: PropTypes.string,\n  // }\n\n  const [ color, setColor ] = useState(\"#6af\");\n  const [ count, setCount ] = useState(0);\n  const [ playing, setPlaying ] = useState(true);\n  const [ board, setBoard ] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n  const [ winner, setWinner ] = useState(\"\");\n\n  const { player1, player2, actions } = useContext(TictactoeContext);\n\n  const changeColor = (event) => {\n    if (!board[event.target.id] && playing === true) {    \n      const newBoard = [...board];\n      newBoard[event.target.id] = color;\n      // this.setState({ board: newBoard });\n      setBoard(newBoard);\n\n      if (color === \"#6af\") {\n        // this.setState({ \n        //   color: \"#f6c\",\n        // })\n        setColor(\"#f6c\");  \n      } else {\n        // this.setState({ \n        //   color: \"#6af\",\n        // })\n        setColor(\"#6af\");\n      }\n      // this.setState( prevState => ({\n      //    count: prevState.count + 1 \n      // }));\n      setCount(count + 1)\n    }\n  }\n\n  // componentDidUpdate () {\n  //   const { count, playing } = this.state;\n  //   if ((this.conditions() || count === 9) && playing === true) {\n  //     this.setState({\n  //       playing: false,\n  //     })\n  //     if (this.conditions()) {\n  //       alert(`${ this.chooseWinner() } wins`);\n  //       this.setState({ winner: `${ this.chooseWinner() }` })\n  //     } else {\n  //       alert(\"Tie\");\n  //     }\n  //   } \n  // }\n  \n  const isPlayer1sTurn = () => {\n    return color === \"#6af\"\n  }\n\n  const restart = () => {\n    // this.setState({ \n    //   playing: true,\n    //   board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n    //   color: \"#6af\",\n    //   count: 0,\n    //   winner: \"\"\n    // })\n    setPlaying(true);\n    setBoard([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n    setColor(\"#6af\");\n    setCount(0);\n    setWinner(\"\");\n  }\n\n  useEffect(() => {\n\n    const validation = (num1, num2, num3) => {\n      return board[num1] &&\n             board[num1] === board[num2] &&\n             board[num2] === board[num3]\n    } \n\n    const chooseWinner = () => {\n      return color === \"#6af\" ? player2 : player1;\n    }\n\n    const conditions = () => {\n      let val = validation;\n      return (val(0, 1, 2) || val(3, 4, 5) || val(6, 7, 8) ||\n              val(0, 3, 6) || val(1, 4, 7) || val(2, 5, 8) ||\n              val(0, 4, 8) || val(2, 4, 6)                   \n      );\n    }\n    const cond = conditions();\n    const chw = chooseWinner();\n\n    if ((cond || count === 9) && playing === true) {\n      // this.setState({\n      //   playing: false,\n      // })\n      setPlaying(false);\n\n      if (cond) {\n        alert(`${ chw() } wins`);\n        // this.setState({ winner: `${ this.chooseWinner() }` })\n        setWinner(chw());\n      } else {\n        alert(\"Tie\");\n      }\n    }\n  }, [ count, playing, color, player1, player2 ]);\n\n  return (\n    <Body>\n      { winner && <Banner color=\"#1a7\">{winner} wins</Banner>}\n      { (!winner && count === 9) && <Banner color=\"#e69500\">Tie</Banner>}\n      <Players>\n        <div>\n          <Paragraph primary=\"#6af\">{ player1 }</Paragraph>\n          { (isPlayer1sTurn() && playing) && <Banner color=\"#e69500\">Your turn</Banner> }\n        </div>\n        <div>\n          <Paragraph primary=\"#f6c\">{ player2 }</Paragraph>\n          { (color !== \"#6af\" && playing) && <Banner color=\"#e69500\">Your turn</Banner> }\n        </div>\n      </Players>\n      <Board>\n        <Content>\n          { board.map((num, i) => \n            <Square \n              key={ i } id={ i } color={ num } changeColor={ changeColor }\n            />\n          ) }\n        </Content>  \n      </Board>\n      <Buttons>\n        <Button onClick={ restart }>Restart</Button>\n        <Button onClick={ actions.onClickNewGameButton }>New Game</Button>\n      </Buttons>\n    </Body>\n  );\n}\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}